{"ast":null,"code":"// API service for communicating with the backend\nconst API_BASE_URL = 'http://localhost:5002/api';\nclass ApiService {\n  // Get upper-body clothing recommendations\n  static async getRecommendations(size, gender = 'Men', maxRecommendations = 10) {\n    try {\n      // Validate size - all standard sizes are supported\n      const validSizes = ['XXS', 'XS', 'S', 'M', 'L', 'XL', 'XXL', 'Free Size'];\n      if (!validSizes.includes(size)) {\n        console.warn(`Size '${size}' not supported, defaulting to XL`);\n        size = 'XL'; // Default to XL (most common)\n      }\n      const response = await fetch(`${API_BASE_URL}/ml/recommendations/upper-body`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          size,\n          gender,\n          max_recommendations: maxRecommendations\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching recommendations:', error);\n      throw error;\n    }\n  }\n\n  // Search products\n  static async searchProducts(query, size = null, maxResults = 20) {\n    try {\n      // Validate size if provided - only XL and S are supported\n      if (size) {\n        const validSizes = ['XL', 'S'];\n        if (!validSizes.includes(size)) {\n          console.warn(`Size '${size}' not supported, defaulting to XL`);\n          size = 'XL'; // Default to XL (most common)\n        }\n      }\n      const response = await fetch(`${API_BASE_URL}/ml/recommendations/search`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query,\n          size,\n          max_results: maxResults\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error searching products:', error);\n      throw error;\n    }\n  }\n\n  // Get available sizes\n  static async getAvailableSizes() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ml/sizes`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching sizes:', error);\n      throw error;\n    }\n  }\n\n  // Get dataset statistics\n  static async getStatistics() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ml/statistics`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching statistics:', error);\n      throw error;\n    }\n  }\n\n  // Check backend health\n  static async checkHealth() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ml/health`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking health:', error);\n      throw error;\n    }\n  }\n}\nexport default ApiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","getRecommendations","size","gender","maxRecommendations","validSizes","includes","console","warn","response","fetch","method","headers","body","JSON","stringify","max_recommendations","ok","Error","status","json","error","searchProducts","query","maxResults","max_results","getAvailableSizes","getStatistics","checkHealth"],"sources":["/Users/dhirajbalayar/Desktop/fashion/frontend/src/services/api.js"],"sourcesContent":["// API service for communicating with the backend\nconst API_BASE_URL = 'http://localhost:5002/api';\n\nclass ApiService {\n    // Get upper-body clothing recommendations\n    static async getRecommendations(size, gender = 'Men', maxRecommendations = 10) {\n        try {\n            // Validate size - all standard sizes are supported\n            const validSizes = ['XXS', 'XS', 'S', 'M', 'L', 'XL', 'XXL', 'Free Size'];\n            if (!validSizes.includes(size)) {\n                console.warn(`Size '${size}' not supported, defaulting to XL`);\n                size = 'XL'; // Default to XL (most common)\n            }\n            \n            const response = await fetch(`${API_BASE_URL}/ml/recommendations/upper-body`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    size,\n                    gender,\n                    max_recommendations: maxRecommendations\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching recommendations:', error);\n            throw error;\n        }\n    }\n\n    // Search products\n    static async searchProducts(query, size = null, maxResults = 20) {\n        try {\n            // Validate size if provided - only XL and S are supported\n            if (size) {\n                const validSizes = ['XL', 'S'];\n                if (!validSizes.includes(size)) {\n                    console.warn(`Size '${size}' not supported, defaulting to XL`);\n                    size = 'XL'; // Default to XL (most common)\n                }\n            }\n            \n            const response = await fetch(`${API_BASE_URL}/ml/recommendations/search`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    query,\n                    size,\n                    max_results: maxResults\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error searching products:', error);\n            throw error;\n        }\n    }\n\n    // Get available sizes\n    static async getAvailableSizes() {\n        try {\n            const response = await fetch(`${API_BASE_URL}/ml/sizes`);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching sizes:', error);\n            throw error;\n        }\n    }\n\n    // Get dataset statistics\n    static async getStatistics() {\n        try {\n            const response = await fetch(`${API_BASE_URL}/ml/statistics`);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching statistics:', error);\n            throw error;\n        }\n    }\n\n    // Check backend health\n    static async checkHealth() {\n        try {\n            const response = await fetch(`${API_BASE_URL}/ml/health`);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error checking health:', error);\n            throw error;\n        }\n    }\n}\n\nexport default ApiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}