{"ast":null,"code":"// // src/pages/Measure.jsx\n// import React, { useRef, useEffect, useState, useCallback } from \"react\";\n// import { Pose } from \"@mediapipe/pose\";\n// import { Camera } from \"@mediapipe/camera_utils\";\n\n// /* ---------- Calibration ---------- */\n// const A4_WIDTH_CM = 21.0; // reference width\n// const CHEST_MULTIPLIER = 1.75; // shoulder flat → chest circumference (tune 1.70–1.85)\n// const UPPER_WAIST_FACTOR = 0.90; // hip width ≈ a bit wider than upper waist\n\n// /* ---------- Overlay helpers ---------- */\n// const UPPER = [\n//   [0,1],[1,2],[2,3],[3,7],\n//   [0,11],[0,12],\n//   [11,13],[13,15],\n//   [12,14],[14,16],\n//   [11,12],\n//   [11,23],[12,24],\n// ];\n// const LOWER = [\n//   [23,25],[25,27],[27,31],\n//   [24,26],[26,28],[28,32],\n//   [23,24],\n// ];\n// const drawSeg = (ctx, lm, a, b, color, width, W, H) => {\n//   const A = lm[a], B = lm[b];\n//   if (!A || !B) return;\n//   if ((A.visibility ?? 0) < 0.4 || (B.visibility ?? 0) < 0.4) return;\n//   ctx.strokeStyle = color; ctx.lineWidth = width;\n//   ctx.beginPath(); ctx.moveTo(A.x*W, A.y*H); ctx.lineTo(B.x*W, B.y*H); ctx.stroke();\n// };\n// const drawBBox = (ctx, lm, W, H, color=\"rgba(0,255,0,0.9)\") => {\n//   const pts = lm.filter(p => (p?.visibility ?? 0) > 0.4);\n//   if (!pts.length) return;\n//   const xs = pts.map(p=>p.x*W), ys = pts.map(p=>p.y*H);\n//   const minX = Math.max(0, Math.min(...xs)), maxX = Math.min(W, Math.max(...xs));\n//   const minY = Math.max(0, Math.min(...ys)), maxY = Math.min(H, Math.max(...ys));\n//   const pad = 8; ctx.strokeStyle = color; ctx.lineWidth = 3;\n//   ctx.strokeRect(minX-pad, minY-pad, (maxX-minX)+pad*2, (maxY-minY)+pad*2);\n// };\n\n// /* ---------- Size recommendation (simple baseline) ---------- */\n// const recommendTopSize = (chestCm) => {\n//   if (!chestCm) return null;\n//   // Unisex/men baseline. You can swap to brand tables later.\n//   const table = [\n//     { size: \"XS\", min: 78, max: 86 },\n//     { size: \"S\",  min: 86, max: 94 },\n//     { size: \"M\",  min: 94, max: 102 },\n//     { size: \"L\",  min: 102, max: 110 },\n//     { size: \"XL\", min: 110, max: 118 },\n//     { size: \"XXL\",min: 118, max: 126 },\n//   ];\n//   const hit = table.find(r => chestCm >= r.min && chestCm < r.max);\n//   return hit?.size ?? (chestCm < table[0].min ? \"XS\" : \"XXL+\");\n// };\n\n// // Optional style hint based on proportions (very light heuristic)\n// const styleHint = (chestCm, shoulderCm) => {\n//   if (!chestCm || !shoulderCm) return \"\";\n//   const ratio = chestCm / (shoulderCm || 1); // ~3–5 normal range\n//   if (ratio < 3.6) return \"Try regular/relaxed fits.\";\n//   if (ratio > 4.6) return \"Slim or tailored fits may suit better.\";\n//   return \"Regular fit is likely comfortable.\";\n// };\n\n// export default function Measure() {\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const poseRef = useRef(null);\n//   const camRef = useRef(null);\n\n//   const [phase, setPhase] = useState(\"calibrate\"); // 'calibrate' | 'measure' | 'locked'\n//   const [status, setStatus] = useState(\"Hold an A4 sheet at chest level and match the bar width.\");\n//   const [barPx, setBarPx] = useState(300);\n//   const [cmPerPx, setCmPerPx] = useState(null);\n\n//   const [locked, setLocked] = useState(false);\n//   const [meas, setMeas] = useState(null); // { chestCm, shoulderCm, upperWaistCm, quality }\n\n//   // stability settings\n//   const GUIDE_MARGIN = 0.08;\n//   const STABILITY_FRAMES = 12;\n//   const MOVEMENT_EPS = 0.015;\n//   const recentShoulderN = useRef([]);\n//   const chestBuf = useRef([]);\n//   const shoulderBuf = useRef([]);\n//   const waistBuf = useRef([]);\n\n//   const getDistance = useCallback((a,b)=>Math.hypot(a.x-b.x,a.y-b.y),[]);\n\n//   const stopCamera = () => {\n//     try {\n//       camRef.current?.stop?.();\n//       const v = videoRef.current;\n//       v?.srcObject && v.srcObject.getTracks().forEach(t=>t.stop());\n//       if (v) v.srcObject = null;\n//     } catch {}\n//   };\n\n//   const startCamera = async (pose) => {\n//     const v = videoRef.current;\n//     const camera = new Camera(v, {\n//       onFrame: async () => { await pose.send({ image: v }); },\n//       width: 1280, height: 720,\n//     });\n//     camRef.current = camera;\n//     camera.start();\n//   };\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     const ctx = canvas.getContext(\"2d\");\n\n//     const pose = new Pose({\n//       // Load from local public assets & force non‑SIMD to avoid WASM crash\n//       locateFile: (file) => `/mediapipe/pose/${file.replace('simd_', '')}`,\n//     });\n//     poseRef.current = pose;\n\n//     pose.setOptions({\n//       modelComplexity: /Mobi|Android/i.test(navigator.userAgent) ? 0 : 1, // smoother on phones\n//       smoothLandmarks: true,\n//       enableSegmentation: false,\n//       minDetectionConfidence: 0.5,\n//       minTrackingConfidence: 0.5,\n//     });\n\n//     pose.onResults((res) => {\n//       if (locked) return;\n\n//       const W = res.image.width, H = res.image.height;\n//       if (canvas.width !== W) canvas.width = W;\n//       if (canvas.height !== H) canvas.height = H;\n\n//       ctx.save();\n//       ctx.clearRect(0,0,W,H);\n//       ctx.drawImage(res.image,0,0,W,H);\n\n//       // guide box\n//       const gx = W*GUIDE_MARGIN, gy = H*GUIDE_MARGIN;\n//       const gW = W*(1-GUIDE_MARGIN*2), gH = H*(1-GUIDE_MARGIN*2);\n//       ctx.strokeStyle = \"rgba(125,255,160,0.85)\";\n//       ctx.lineWidth = 3; ctx.strokeRect(gx, gy, gW, gH);\n\n//       // calibration bar\n//       if (phase === \"calibrate\") {\n//         const barH = 14;\n//         ctx.fillStyle = \"rgba(255,255,255,0.95)\";\n//         ctx.fillRect((W-barPx)/2, H*0.1, barPx, barH);\n//         ctx.font = \"14px system-ui, sans-serif\";\n//         ctx.fillStyle = \"rgba(255,255,255,0.95)\";\n//         ctx.fillText(\n//           \"Match this bar to A4 width (21 cm) at chest depth.\",\n//           Math.max(12,(W-360)/2), H*0.1-8\n//         );\n//       }\n\n//       const lm = res.poseLandmarks;\n//       if (!lm) { setStatus(\"Detecting body…\"); ctx.restore(); return; }\n\n//       // overlay (screenshot style)\n//       drawBBox(ctx, lm, W, H);\n//       UPPER.forEach(([a,b])=>drawSeg(ctx,lm,a,b,\"#2aa4ff\",3,W,H));\n//       LOWER.forEach(([a,b])=>drawSeg(ctx,lm,a,b,\"#ff9933\",3,W,H));\n\n//       const vis = (i) => (lm[i]?.visibility ?? 0) > 0.45;\n//       const shouldersOK = vis(11) && vis(12);\n//       const hipsOK = vis(23) || vis(24);\n//       if (!(shouldersOK && hipsOK)) { setStatus(\"Show shoulders & upper torso.\"); ctx.restore(); return; }\n\n//       const Lsh = lm[11], Rsh = lm[12];\n//       const Lhip = lm[23], Rhip = lm[24];\n//       const hip = vis(23) ? Lhip : Rhip;\n\n//       // key dots\n//       const shMid = { x:(Lsh.x+Rsh.x)/2, y:(Lsh.y+Rsh.y)/2 };\n//       ctx.fillStyle = \"rgba(0,200,255,1)\";\n//       [Lsh, Rsh, shMid, hip].forEach(p => { ctx.beginPath(); ctx.arc(p.x*W, p.y*H, 6, 0, Math.PI*2); ctx.fill(); });\n\n//       // must be inside guide\n//       const inside = [Lsh,Rsh,hip].every(p => p.x*W>=gx && p.x*W<=gx+gW && p.y*H>=gy && p.y*H<=gy+gH);\n//       if (!inside) { setStatus(\"Step back/center inside the frame.\"); ctx.restore(); return; }\n\n//       if (phase === \"calibrate\") { setStatus(\"Adjust bar → Set calibration.\"); ctx.restore(); return; }\n//       if (!cmPerPx) { setStatus(\"Click Set calibration first.\"); ctx.restore(); return; }\n\n//       // normalized stability\n//       const shoulderWidthN = getDistance(Lsh,Rsh);\n//       const torsoHeightN = getDistance(shMid, hip);\n//       if (torsoHeightN <= 0) { setStatus(\"Hold still…\"); ctx.restore(); return; }\n\n//       const bufN = recentShoulderN.current;\n//       bufN.push(shoulderWidthN); if (bufN.length > STABILITY_FRAMES) bufN.shift();\n//       const avg = bufN.reduce((a,b)=>a+b,0)/bufN.length;\n//       const maxDev = Math.max(...bufN.map(v=>Math.abs(v-avg)));\n\n//       // ----- measurements in cm -----\n//       const shoulderPx = Math.abs((Lsh.x - Rsh.x) * W);\n//       const shoulderCm = shoulderPx * cmPerPx;\n\n//       const chestCmInstant = shoulderCm * CHEST_MULTIPLIER;\n\n//       let upperWaistCmInstant = null;\n//       if (vis(23) && vis(24)) {\n//         const hipFlatCm = Math.abs((Lhip.x - Rhip.x) * W) * cmPerPx;\n//         upperWaistCmInstant = hipFlatCm * UPPER_WAIST_FACTOR;\n//       }\n\n//       // median smoothing\n//       const pushMed = (ref, val, n=15) => {\n//         if (val==null) return null;\n//         ref.current.push(val);\n//         if (ref.current.length>n) ref.current.shift();\n//         const s=[...ref.current].sort((a,b)=>a-b);\n//         const m=Math.floor(s.length/2);\n//         return s.length%2 ? s[m] : (s[m-1]+s[m])/2;\n//       };\n//       const chestMed = pushMed(chestBuf, chestCmInstant);\n//       const shoulderMed = pushMed(shoulderBuf, shoulderCm);\n//       const waistMed = pushMed(waistBuf, upperWaistCmInstant);\n\n//       // stability: normalized shoulders + cm spread\n//       const spread = chestBuf.current.length>=8 ? Math.max(...chestBuf.current)-Math.min(...chestBuf.current) : 999;\n//       const stable = bufN.length>=STABILITY_FRAMES && maxDev < MOVEMENT_EPS && spread < 1.8; // slightly relaxed\n\n//       if (stable && chestMed && shoulderMed) {\n//         const out = {\n//           chestCm: Number(chestMed.toFixed(1)),\n//           shoulderCm: Number(shoulderMed.toFixed(1)),\n//           upperWaistCm: waistMed ? Number(waistMed.toFixed(1)) : undefined,\n//           quality: { frames: chestBuf.current.length, spreadCm: Number(spread.toFixed(2)) }\n//         };\n//         setMeas(out);\n//         setLocked(true);\n//         setPhase(\"locked\");\n//         setStatus(\"Locked ✔️\");\n//         stopCamera();\n//       } else {\n//         setStatus(\"Hold still…\");\n//       }\n\n//       ctx.restore();\n//     });\n\n//     startCamera(pose);\n//     return () => { stopCamera(); };\n//   }, [phase, cmPerPx, getDistance, locked, barPx]);\n\n//   const setCalibration = () => {\n//     if (barPx < 40) return;\n//     setCmPerPx(A4_WIDTH_CM / barPx);\n//     setPhase(\"measure\");\n//     setStatus(\"Calibration set. Stand centered; shoulders & upper torso visible.\");\n//     // reset buffers\n//     chestBuf.current = []; shoulderBuf.current = []; waistBuf.current = []; recentShoulderN.current = [];\n//   };\n\n//   const retake = () => {\n//     setLocked(false); setMeas(null); setPhase(\"measure\");\n//     setStatus(\"Stand centered; hold still 1–2 seconds.\");\n//     chestBuf.current = []; shoulderBuf.current = []; waistBuf.current = []; recentShoulderN.current = [];\n//     if (poseRef.current) startCamera(poseRef.current);\n//   };\n\n//   const recalibrate = () => {\n//     setLocked(false); setMeas(null); setPhase(\"calibrate\");\n//     setStatus(\"Hold an A4 sheet at chest level and match the bar width.\");\n//     chestBuf.current = []; shoulderBuf.current = []; waistBuf.current = []; recentShoulderN.current = [];\n//     if (poseRef.current) startCamera(poseRef.current);\n//   };\n\n//   return (\n//     <div className=\"relative w-full min-h-screen bg-gradient-to-b from-[#0b0f14] to-[#111827] flex flex-col items-center\">\n//       {/* Header */}\n//       <div className=\"w-full max-w-6xl flex items-center justify-between px-4 pt-4\">\n//         <div className=\"text-white font-semibold text-lg\">AI Fashion Fit — Upper Body (Measurements)</div>\n//         <div className=\"bg-white/90 rounded-full px-3 py-1 text-sm shadow\">{status}</div>\n//       </div>\n\n//       {/* Camera */}\n//       <div className=\"relative w-full max-w-6xl aspect-video mt-4 rounded-2xl overflow-hidden shadow-2xl ring-1 ring-white/10\">\n//         <video ref={videoRef} className=\"absolute inset-0 w-full h-full object-contain bg-black\" autoPlay muted playsInline />\n//         <canvas ref={canvasRef} className=\"absolute inset-0 w-full h-full object-contain pointer-events-none\" />\n\n//         {/* Calibration UI */}\n//         {phase === \"calibrate\" && (\n//           <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 bg-white/95 backdrop-blur rounded-2xl px-4 py-3 flex items-center gap-4 shadow-lg\">\n//             <div className=\"text-sm font-medium\">A4 width match</div>\n//             <input type=\"range\" min={120} max={900} value={barPx} onChange={(e)=>setBarPx(Number(e.target.value))} className=\"w-72 accent-purple-600\" />\n//             <button onClick={setCalibration} className=\"px-4 py-2 rounded-xl bg-purple-600 text-white hover:bg-purple-700 text-sm shadow\">\n//               Set calibration\n//             </button>\n//           </div>\n//         )}\n\n//         {/* Results */}\n//         {phase === \"locked\" && meas && (\n//           <div className=\"absolute inset-0 bg-black/60 flex items-center justify-center p-4\">\n//             <div className=\"bg-white max-w-md w-full rounded-2xl p-6 shadow-2xl\">\n//               <div className=\"text-xl font-bold mb-3\">Upper‑Body Measurements</div>\n//               <div className=\"grid grid-cols-2 gap-y-1 text-[15px]\">\n//                 <div>Chest (circ.)</div><div className=\"font-semibold\">{meas.chestCm} cm</div>\n//                 <div>Shoulder width</div><div className=\"font-semibold\">{meas.shoulderCm} cm</div>\n//                 {meas.upperWaistCm !== undefined && (\n//                   <>\n//                     <div>Upper‑waist (flat)</div><div className=\"font-semibold\">{meas.upperWaistCm} cm</div>\n//                   </>\n//                 )}\n//               </div>\n\n//               {/* Suggested size + style */}\n//               <div className=\"mt-4 p-3 rounded-xl bg-purple-50 border border-purple-200\">\n//                 <div className=\"text-sm text-purple-900\">Suggested top size</div>\n//                 <div className=\"text-lg font-semibold text-purple-900\">\n//                   {recommendTopSize(meas.chestCm)}\n//                 </div>\n//                 <div className=\"text-xs text-purple-700 mt-1\">\n//                   {styleHint(meas.chestCm, meas.shoulderCm)} Based on chest circumference; refine per brand later.\n//                 </div>\n//               </div>\n\n//               <div className=\"mt-3 text-xs text-gray-600\">\n//                 Quality — frames: {meas.quality.frames}, spread: {meas.quality.spreadCm} cm\n//               </div>\n//               <div className=\"mt-5 flex gap-2\">\n//                 <button onClick={retake} className=\"px-4 py-2 rounded-xl bg-black text-white hover:opacity-90\">Retake</button>\n//                 <button onClick={recalibrate} className=\"px-4 py-2 rounded-xl bg-gray-200 hover:bg-gray-300\">Re‑calibrate</button>\n//                 <button onClick={()=>window.print()} className=\"px-4 py-2 rounded-xl bg-purple-600 text-white hover:bg-purple-700\">Save / Print</button>\n//               </div>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       <p className=\"mt-3 text-white/60 text-sm text-center px-4\">\n//         Tip: keep the A4 sheet flat at chest depth during calibration. Stand square to the camera. Hold still for 1–2 seconds.\n//       </p>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/Users/dhirajbalayar/Desktop/fashion/frontend/src/pages/Measure.jsx"],"sourcesContent":["// // src/pages/Measure.jsx\n// import React, { useRef, useEffect, useState, useCallback } from \"react\";\n// import { Pose } from \"@mediapipe/pose\";\n// import { Camera } from \"@mediapipe/camera_utils\";\n\n// /* ---------- Calibration ---------- */\n// const A4_WIDTH_CM = 21.0; // reference width\n// const CHEST_MULTIPLIER = 1.75; // shoulder flat → chest circumference (tune 1.70–1.85)\n// const UPPER_WAIST_FACTOR = 0.90; // hip width ≈ a bit wider than upper waist\n\n// /* ---------- Overlay helpers ---------- */\n// const UPPER = [\n//   [0,1],[1,2],[2,3],[3,7],\n//   [0,11],[0,12],\n//   [11,13],[13,15],\n//   [12,14],[14,16],\n//   [11,12],\n//   [11,23],[12,24],\n// ];\n// const LOWER = [\n//   [23,25],[25,27],[27,31],\n//   [24,26],[26,28],[28,32],\n//   [23,24],\n// ];\n// const drawSeg = (ctx, lm, a, b, color, width, W, H) => {\n//   const A = lm[a], B = lm[b];\n//   if (!A || !B) return;\n//   if ((A.visibility ?? 0) < 0.4 || (B.visibility ?? 0) < 0.4) return;\n//   ctx.strokeStyle = color; ctx.lineWidth = width;\n//   ctx.beginPath(); ctx.moveTo(A.x*W, A.y*H); ctx.lineTo(B.x*W, B.y*H); ctx.stroke();\n// };\n// const drawBBox = (ctx, lm, W, H, color=\"rgba(0,255,0,0.9)\") => {\n//   const pts = lm.filter(p => (p?.visibility ?? 0) > 0.4);\n//   if (!pts.length) return;\n//   const xs = pts.map(p=>p.x*W), ys = pts.map(p=>p.y*H);\n//   const minX = Math.max(0, Math.min(...xs)), maxX = Math.min(W, Math.max(...xs));\n//   const minY = Math.max(0, Math.min(...ys)), maxY = Math.min(H, Math.max(...ys));\n//   const pad = 8; ctx.strokeStyle = color; ctx.lineWidth = 3;\n//   ctx.strokeRect(minX-pad, minY-pad, (maxX-minX)+pad*2, (maxY-minY)+pad*2);\n// };\n\n// /* ---------- Size recommendation (simple baseline) ---------- */\n// const recommendTopSize = (chestCm) => {\n//   if (!chestCm) return null;\n//   // Unisex/men baseline. You can swap to brand tables later.\n//   const table = [\n//     { size: \"XS\", min: 78, max: 86 },\n//     { size: \"S\",  min: 86, max: 94 },\n//     { size: \"M\",  min: 94, max: 102 },\n//     { size: \"L\",  min: 102, max: 110 },\n//     { size: \"XL\", min: 110, max: 118 },\n//     { size: \"XXL\",min: 118, max: 126 },\n//   ];\n//   const hit = table.find(r => chestCm >= r.min && chestCm < r.max);\n//   return hit?.size ?? (chestCm < table[0].min ? \"XS\" : \"XXL+\");\n// };\n\n// // Optional style hint based on proportions (very light heuristic)\n// const styleHint = (chestCm, shoulderCm) => {\n//   if (!chestCm || !shoulderCm) return \"\";\n//   const ratio = chestCm / (shoulderCm || 1); // ~3–5 normal range\n//   if (ratio < 3.6) return \"Try regular/relaxed fits.\";\n//   if (ratio > 4.6) return \"Slim or tailored fits may suit better.\";\n//   return \"Regular fit is likely comfortable.\";\n// };\n\n// export default function Measure() {\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const poseRef = useRef(null);\n//   const camRef = useRef(null);\n\n//   const [phase, setPhase] = useState(\"calibrate\"); // 'calibrate' | 'measure' | 'locked'\n//   const [status, setStatus] = useState(\"Hold an A4 sheet at chest level and match the bar width.\");\n//   const [barPx, setBarPx] = useState(300);\n//   const [cmPerPx, setCmPerPx] = useState(null);\n\n//   const [locked, setLocked] = useState(false);\n//   const [meas, setMeas] = useState(null); // { chestCm, shoulderCm, upperWaistCm, quality }\n\n//   // stability settings\n//   const GUIDE_MARGIN = 0.08;\n//   const STABILITY_FRAMES = 12;\n//   const MOVEMENT_EPS = 0.015;\n//   const recentShoulderN = useRef([]);\n//   const chestBuf = useRef([]);\n//   const shoulderBuf = useRef([]);\n//   const waistBuf = useRef([]);\n\n//   const getDistance = useCallback((a,b)=>Math.hypot(a.x-b.x,a.y-b.y),[]);\n\n//   const stopCamera = () => {\n//     try {\n//       camRef.current?.stop?.();\n//       const v = videoRef.current;\n//       v?.srcObject && v.srcObject.getTracks().forEach(t=>t.stop());\n//       if (v) v.srcObject = null;\n//     } catch {}\n//   };\n\n//   const startCamera = async (pose) => {\n//     const v = videoRef.current;\n//     const camera = new Camera(v, {\n//       onFrame: async () => { await pose.send({ image: v }); },\n//       width: 1280, height: 720,\n//     });\n//     camRef.current = camera;\n//     camera.start();\n//   };\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     const ctx = canvas.getContext(\"2d\");\n\n//     const pose = new Pose({\n//       // Load from local public assets & force non‑SIMD to avoid WASM crash\n//       locateFile: (file) => `/mediapipe/pose/${file.replace('simd_', '')}`,\n//     });\n//     poseRef.current = pose;\n\n//     pose.setOptions({\n//       modelComplexity: /Mobi|Android/i.test(navigator.userAgent) ? 0 : 1, // smoother on phones\n//       smoothLandmarks: true,\n//       enableSegmentation: false,\n//       minDetectionConfidence: 0.5,\n//       minTrackingConfidence: 0.5,\n//     });\n\n//     pose.onResults((res) => {\n//       if (locked) return;\n\n//       const W = res.image.width, H = res.image.height;\n//       if (canvas.width !== W) canvas.width = W;\n//       if (canvas.height !== H) canvas.height = H;\n\n//       ctx.save();\n//       ctx.clearRect(0,0,W,H);\n//       ctx.drawImage(res.image,0,0,W,H);\n\n//       // guide box\n//       const gx = W*GUIDE_MARGIN, gy = H*GUIDE_MARGIN;\n//       const gW = W*(1-GUIDE_MARGIN*2), gH = H*(1-GUIDE_MARGIN*2);\n//       ctx.strokeStyle = \"rgba(125,255,160,0.85)\";\n//       ctx.lineWidth = 3; ctx.strokeRect(gx, gy, gW, gH);\n\n//       // calibration bar\n//       if (phase === \"calibrate\") {\n//         const barH = 14;\n//         ctx.fillStyle = \"rgba(255,255,255,0.95)\";\n//         ctx.fillRect((W-barPx)/2, H*0.1, barPx, barH);\n//         ctx.font = \"14px system-ui, sans-serif\";\n//         ctx.fillStyle = \"rgba(255,255,255,0.95)\";\n//         ctx.fillText(\n//           \"Match this bar to A4 width (21 cm) at chest depth.\",\n//           Math.max(12,(W-360)/2), H*0.1-8\n//         );\n//       }\n\n//       const lm = res.poseLandmarks;\n//       if (!lm) { setStatus(\"Detecting body…\"); ctx.restore(); return; }\n\n//       // overlay (screenshot style)\n//       drawBBox(ctx, lm, W, H);\n//       UPPER.forEach(([a,b])=>drawSeg(ctx,lm,a,b,\"#2aa4ff\",3,W,H));\n//       LOWER.forEach(([a,b])=>drawSeg(ctx,lm,a,b,\"#ff9933\",3,W,H));\n\n//       const vis = (i) => (lm[i]?.visibility ?? 0) > 0.45;\n//       const shouldersOK = vis(11) && vis(12);\n//       const hipsOK = vis(23) || vis(24);\n//       if (!(shouldersOK && hipsOK)) { setStatus(\"Show shoulders & upper torso.\"); ctx.restore(); return; }\n\n//       const Lsh = lm[11], Rsh = lm[12];\n//       const Lhip = lm[23], Rhip = lm[24];\n//       const hip = vis(23) ? Lhip : Rhip;\n\n//       // key dots\n//       const shMid = { x:(Lsh.x+Rsh.x)/2, y:(Lsh.y+Rsh.y)/2 };\n//       ctx.fillStyle = \"rgba(0,200,255,1)\";\n//       [Lsh, Rsh, shMid, hip].forEach(p => { ctx.beginPath(); ctx.arc(p.x*W, p.y*H, 6, 0, Math.PI*2); ctx.fill(); });\n\n//       // must be inside guide\n//       const inside = [Lsh,Rsh,hip].every(p => p.x*W>=gx && p.x*W<=gx+gW && p.y*H>=gy && p.y*H<=gy+gH);\n//       if (!inside) { setStatus(\"Step back/center inside the frame.\"); ctx.restore(); return; }\n\n//       if (phase === \"calibrate\") { setStatus(\"Adjust bar → Set calibration.\"); ctx.restore(); return; }\n//       if (!cmPerPx) { setStatus(\"Click Set calibration first.\"); ctx.restore(); return; }\n\n//       // normalized stability\n//       const shoulderWidthN = getDistance(Lsh,Rsh);\n//       const torsoHeightN = getDistance(shMid, hip);\n//       if (torsoHeightN <= 0) { setStatus(\"Hold still…\"); ctx.restore(); return; }\n\n//       const bufN = recentShoulderN.current;\n//       bufN.push(shoulderWidthN); if (bufN.length > STABILITY_FRAMES) bufN.shift();\n//       const avg = bufN.reduce((a,b)=>a+b,0)/bufN.length;\n//       const maxDev = Math.max(...bufN.map(v=>Math.abs(v-avg)));\n\n//       // ----- measurements in cm -----\n//       const shoulderPx = Math.abs((Lsh.x - Rsh.x) * W);\n//       const shoulderCm = shoulderPx * cmPerPx;\n\n//       const chestCmInstant = shoulderCm * CHEST_MULTIPLIER;\n\n//       let upperWaistCmInstant = null;\n//       if (vis(23) && vis(24)) {\n//         const hipFlatCm = Math.abs((Lhip.x - Rhip.x) * W) * cmPerPx;\n//         upperWaistCmInstant = hipFlatCm * UPPER_WAIST_FACTOR;\n//       }\n\n//       // median smoothing\n//       const pushMed = (ref, val, n=15) => {\n//         if (val==null) return null;\n//         ref.current.push(val);\n//         if (ref.current.length>n) ref.current.shift();\n//         const s=[...ref.current].sort((a,b)=>a-b);\n//         const m=Math.floor(s.length/2);\n//         return s.length%2 ? s[m] : (s[m-1]+s[m])/2;\n//       };\n//       const chestMed = pushMed(chestBuf, chestCmInstant);\n//       const shoulderMed = pushMed(shoulderBuf, shoulderCm);\n//       const waistMed = pushMed(waistBuf, upperWaistCmInstant);\n\n//       // stability: normalized shoulders + cm spread\n//       const spread = chestBuf.current.length>=8 ? Math.max(...chestBuf.current)-Math.min(...chestBuf.current) : 999;\n//       const stable = bufN.length>=STABILITY_FRAMES && maxDev < MOVEMENT_EPS && spread < 1.8; // slightly relaxed\n\n//       if (stable && chestMed && shoulderMed) {\n//         const out = {\n//           chestCm: Number(chestMed.toFixed(1)),\n//           shoulderCm: Number(shoulderMed.toFixed(1)),\n//           upperWaistCm: waistMed ? Number(waistMed.toFixed(1)) : undefined,\n//           quality: { frames: chestBuf.current.length, spreadCm: Number(spread.toFixed(2)) }\n//         };\n//         setMeas(out);\n//         setLocked(true);\n//         setPhase(\"locked\");\n//         setStatus(\"Locked ✔️\");\n//         stopCamera();\n//       } else {\n//         setStatus(\"Hold still…\");\n//       }\n\n//       ctx.restore();\n//     });\n\n//     startCamera(pose);\n//     return () => { stopCamera(); };\n//   }, [phase, cmPerPx, getDistance, locked, barPx]);\n\n//   const setCalibration = () => {\n//     if (barPx < 40) return;\n//     setCmPerPx(A4_WIDTH_CM / barPx);\n//     setPhase(\"measure\");\n//     setStatus(\"Calibration set. Stand centered; shoulders & upper torso visible.\");\n//     // reset buffers\n//     chestBuf.current = []; shoulderBuf.current = []; waistBuf.current = []; recentShoulderN.current = [];\n//   };\n\n//   const retake = () => {\n//     setLocked(false); setMeas(null); setPhase(\"measure\");\n//     setStatus(\"Stand centered; hold still 1–2 seconds.\");\n//     chestBuf.current = []; shoulderBuf.current = []; waistBuf.current = []; recentShoulderN.current = [];\n//     if (poseRef.current) startCamera(poseRef.current);\n//   };\n\n//   const recalibrate = () => {\n//     setLocked(false); setMeas(null); setPhase(\"calibrate\");\n//     setStatus(\"Hold an A4 sheet at chest level and match the bar width.\");\n//     chestBuf.current = []; shoulderBuf.current = []; waistBuf.current = []; recentShoulderN.current = [];\n//     if (poseRef.current) startCamera(poseRef.current);\n//   };\n\n//   return (\n//     <div className=\"relative w-full min-h-screen bg-gradient-to-b from-[#0b0f14] to-[#111827] flex flex-col items-center\">\n//       {/* Header */}\n//       <div className=\"w-full max-w-6xl flex items-center justify-between px-4 pt-4\">\n//         <div className=\"text-white font-semibold text-lg\">AI Fashion Fit — Upper Body (Measurements)</div>\n//         <div className=\"bg-white/90 rounded-full px-3 py-1 text-sm shadow\">{status}</div>\n//       </div>\n\n//       {/* Camera */}\n//       <div className=\"relative w-full max-w-6xl aspect-video mt-4 rounded-2xl overflow-hidden shadow-2xl ring-1 ring-white/10\">\n//         <video ref={videoRef} className=\"absolute inset-0 w-full h-full object-contain bg-black\" autoPlay muted playsInline />\n//         <canvas ref={canvasRef} className=\"absolute inset-0 w-full h-full object-contain pointer-events-none\" />\n\n//         {/* Calibration UI */}\n//         {phase === \"calibrate\" && (\n//           <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 bg-white/95 backdrop-blur rounded-2xl px-4 py-3 flex items-center gap-4 shadow-lg\">\n//             <div className=\"text-sm font-medium\">A4 width match</div>\n//             <input type=\"range\" min={120} max={900} value={barPx} onChange={(e)=>setBarPx(Number(e.target.value))} className=\"w-72 accent-purple-600\" />\n//             <button onClick={setCalibration} className=\"px-4 py-2 rounded-xl bg-purple-600 text-white hover:bg-purple-700 text-sm shadow\">\n//               Set calibration\n//             </button>\n//           </div>\n//         )}\n\n//         {/* Results */}\n//         {phase === \"locked\" && meas && (\n//           <div className=\"absolute inset-0 bg-black/60 flex items-center justify-center p-4\">\n//             <div className=\"bg-white max-w-md w-full rounded-2xl p-6 shadow-2xl\">\n//               <div className=\"text-xl font-bold mb-3\">Upper‑Body Measurements</div>\n//               <div className=\"grid grid-cols-2 gap-y-1 text-[15px]\">\n//                 <div>Chest (circ.)</div><div className=\"font-semibold\">{meas.chestCm} cm</div>\n//                 <div>Shoulder width</div><div className=\"font-semibold\">{meas.shoulderCm} cm</div>\n//                 {meas.upperWaistCm !== undefined && (\n//                   <>\n//                     <div>Upper‑waist (flat)</div><div className=\"font-semibold\">{meas.upperWaistCm} cm</div>\n//                   </>\n//                 )}\n//               </div>\n\n//               {/* Suggested size + style */}\n//               <div className=\"mt-4 p-3 rounded-xl bg-purple-50 border border-purple-200\">\n//                 <div className=\"text-sm text-purple-900\">Suggested top size</div>\n//                 <div className=\"text-lg font-semibold text-purple-900\">\n//                   {recommendTopSize(meas.chestCm)}\n//                 </div>\n//                 <div className=\"text-xs text-purple-700 mt-1\">\n//                   {styleHint(meas.chestCm, meas.shoulderCm)} Based on chest circumference; refine per brand later.\n//                 </div>\n//               </div>\n\n//               <div className=\"mt-3 text-xs text-gray-600\">\n//                 Quality — frames: {meas.quality.frames}, spread: {meas.quality.spreadCm} cm\n//               </div>\n//               <div className=\"mt-5 flex gap-2\">\n//                 <button onClick={retake} className=\"px-4 py-2 rounded-xl bg-black text-white hover:opacity-90\">Retake</button>\n//                 <button onClick={recalibrate} className=\"px-4 py-2 rounded-xl bg-gray-200 hover:bg-gray-300\">Re‑calibrate</button>\n//                 <button onClick={()=>window.print()} className=\"px-4 py-2 rounded-xl bg-purple-600 text-white hover:bg-purple-700\">Save / Print</button>\n//               </div>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       <p className=\"mt-3 text-white/60 text-sm text-center px-4\">\n//         Tip: keep the A4 sheet flat at chest depth during calibration. Stand square to the camera. Hold still for 1–2 seconds.\n//       </p>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}