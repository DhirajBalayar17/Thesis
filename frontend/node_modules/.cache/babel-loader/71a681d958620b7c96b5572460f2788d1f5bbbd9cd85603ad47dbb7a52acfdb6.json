{"ast":null,"code":"// API service for communicating with the backend\n// Note: Backend runs on port 5002, ML API runs on port 5001\nconst API_BASE_URL = 'http://localhost:5002/api';\nclass ApiService {\n  // Get upper-body clothing recommendations\n  static async getRecommendations(size, gender = 'Men', maxRecommendations = 10) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ml/recommendations/upper-body`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          size,\n          gender,\n          max_recommendations: maxRecommendations\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching recommendations:', error);\n      throw error;\n    }\n  }\n\n  // Search products\n  static async searchProducts(query, size = null, maxResults = 20) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ml/recommendations/search`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query,\n          size,\n          max_results: maxResults\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error searching products:', error);\n      throw error;\n    }\n  }\n\n  // Get available sizes\n  static async getAvailableSizes() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ml/sizes`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching sizes:', error);\n      throw error;\n    }\n  }\n\n  // Get dataset statistics\n  static async getStatistics() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ml/statistics`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching statistics:', error);\n      throw error;\n    }\n  }\n\n  // Check backend health\n  static async checkHealth() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ml/health`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking health:', error);\n      throw error;\n    }\n  }\n}\nexport default ApiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","getRecommendations","size","gender","maxRecommendations","response","fetch","method","headers","body","JSON","stringify","max_recommendations","ok","Error","status","json","error","console","searchProducts","query","maxResults","max_results","getAvailableSizes","getStatistics","checkHealth"],"sources":["/Users/dhirajbalayar/Desktop/fashion/frontend/src/services/api.js"],"sourcesContent":["// API service for communicating with the backend\n// Note: Backend runs on port 5002, ML API runs on port 5001\nconst API_BASE_URL = 'http://localhost:5002/api';\n\nclass ApiService {\n    // Get upper-body clothing recommendations\n    static async getRecommendations(size, gender = 'Men', maxRecommendations = 10) {\n        try {\n            const response = await fetch(`${API_BASE_URL}/ml/recommendations/upper-body`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    size,\n                    gender,\n                    max_recommendations: maxRecommendations\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching recommendations:', error);\n            throw error;\n        }\n    }\n\n    // Search products\n    static async searchProducts(query, size = null, maxResults = 20) {\n        try {\n            const response = await fetch(`${API_BASE_URL}/ml/recommendations/search`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    query,\n                    size,\n                    max_results: maxResults\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error searching products:', error);\n            throw error;\n        }\n    }\n\n    // Get available sizes\n    static async getAvailableSizes() {\n        try {\n            const response = await fetch(`${API_BASE_URL}/ml/sizes`);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching sizes:', error);\n            throw error;\n        }\n    }\n\n    // Get dataset statistics\n    static async getStatistics() {\n        try {\n            const response = await fetch(`${API_BASE_URL}/ml/statistics`);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching statistics:', error);\n            throw error;\n        }\n    }\n\n    // Check backend health\n    static async checkHealth() {\n        try {\n            const response = await fetch(`${API_BASE_URL}/ml/health`);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error checking health:', error);\n            throw error;\n        }\n    }\n}\n\nexport default ApiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}